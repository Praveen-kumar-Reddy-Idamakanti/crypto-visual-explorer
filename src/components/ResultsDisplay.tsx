
import React, { useState } from 'react';
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Copy, Download, RotateCcw, Eye, Check } from 'lucide-react';
import { useToast } from "@/hooks/use-toast";
import { Algorithm } from './CryptoLearningTool';

interface ResultsDisplayProps {
  algorithm: Algorithm;
  input: string;
  result: string;
  steps: any[];
  onReset: () => void;
  onViewSteps: () => void;
}

const ResultsDisplay: React.FC<ResultsDisplayProps> = ({
  algorithm,
  input,
  result,
  steps,
  onReset,
  onViewSteps
}) => {
  const [copied, setCopied] = useState(false);
  const { toast } = useToast();

  const handleCopy = async () => {
    try {
      await navigator.clipboard.writeText(result);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
      toast({
        title: "Copied!",
        description: "Result copied to clipboard",
      });
    } catch (err) {
      toast({
        title: "Copy failed",
        description: "Unable to copy to clipboard",
        variant: "destructive",
      });
    }
  };

  const handleDownload = () => {
    const content = `
${algorithm.toUpperCase()} Processing Results
=====================================

Original Input:
${input}

Final Result:
${result}

Processing Steps:
${steps.map((step, index) => `
Step ${index + 1}: ${step.title}
Description: ${step.description}
Input: ${step.input}
Output: ${step.output}
Explanation: ${step.explanation}
`).join('\n')}

Generated by Cryptographic Algorithms Explorer
`;
    
    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${algorithm}_results.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    toast({
      title: "Downloaded!",
      description: "Results saved to file",
    });
  };

  const getAlgorithmTitle = () => {
    switch (algorithm) {
      case 'aes': return 'AES Encryption';
      case 'des': return 'DES Encryption';
      case 'checksum': return 'Checksum Calculation';
      default: return 'Cryptographic Process';
    }
  };

  const getSuccessMessage = () => {
    switch (algorithm) {
      case 'aes': return 'Your message has been successfully encrypted using AES!';
      case 'des': return 'Your message has been successfully processed with DES!';
      case 'checksum': return 'Checksum has been successfully calculated!';
      default: return 'Process completed successfully!';
    }
  };

  return (
    <div className="space-y-6">
      <div className="text-center">
        <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
          <Check className="w-8 h-8 text-green-600" />
        </div>
        <h2 className="text-2xl font-semibold text-gray-800 mb-2">
          {getAlgorithmTitle()} Complete!
        </h2>
        <p className="text-gray-600">
          {getSuccessMessage()}
        </p>
      </div>

      <div className="grid md:grid-cols-2 gap-6">
        <Card>
          <CardHeader>
            <CardTitle className="text-lg text-gray-700">Original Input</CardTitle>
            <CardDescription>The data you provided for processing</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="bg-gray-50 p-4 rounded-lg border-2 border-gray-200">
              <div className="font-mono text-sm break-all">
                {input}
              </div>
            </div>
            <div className="mt-2 text-sm text-gray-500">
              Length: {input.length} characters
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle className="text-lg text-blue-700">Final Result</CardTitle>
            <CardDescription>
              {algorithm === 'checksum' ? 'Generated checksum value' : 'Processed output'}
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="bg-blue-50 p-4 rounded-lg border-2 border-blue-200">
              <div className="font-mono text-sm break-all">
                {result}
              </div>
            </div>
            <div className="flex items-center justify-between mt-4">
              <div className="text-sm text-gray-500">
                Length: {result.length} characters
              </div>
              <div className="flex gap-2">
                <Button
                  onClick={handleCopy}
                  variant="outline"
                  size="sm"
                  className="flex items-center gap-2"
                >
                  {copied ? <Check className="w-4 h-4" /> : <Copy className="w-4 h-4" />}
                  {copied ? 'Copied!' : 'Copy'}
                </Button>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      <Card>
        <CardHeader>
          <CardTitle className="text-lg">Process Summary</CardTitle>
          <CardDescription>
            Overview of the {algorithm.toUpperCase()} algorithm execution
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex flex-wrap gap-2">
            <Badge variant="outline">Algorithm: {algorithm.toUpperCase()}</Badge>
            <Badge variant="outline">Steps: {steps.length}</Badge>
            <Badge variant="outline" className="bg-green-50 text-green-700">
              Status: Completed
            </Badge>
          </div>

          <div className="bg-gray-50 p-4 rounded-lg">
            <h4 className="font-medium text-gray-800 mb-2">Key Learning Points:</h4>
            <ul className="text-sm text-gray-600 space-y-1">
              {algorithm === 'checksum' && (
                <>
                  <li>â€¢ Checksum provides basic error detection capability</li>
                  <li>â€¢ Data is processed in fixed-size chunks</li>
                  <li>â€¢ One's complement arithmetic is used for final calculation</li>
                  <li>â€¢ Simple but effective for detecting transmission errors</li>
                </>
              )}
              {algorithm === 'des' && (
                <>
                  <li>â€¢ DES uses 16 rounds of Feistel cipher structure</li>
                  <li>â€¢ Initial and final permutations provide additional security</li>
                  <li>â€¢ Each round uses a different subkey derived from the main key</li>
                  <li>â€¢ Now considered insecure due to 56-bit key length</li>
                </>
              )}
              {algorithm === 'aes' && (
                <>
                  <li>â€¢ AES uses substitution-permutation network structure</li>
                  <li>â€¢ Four main operations: SubBytes, ShiftRows, MixColumns, AddRoundKey</li>
                  <li>â€¢ Number of rounds depends on key size (10, 12, or 14 rounds)</li>
                  <li>â€¢ Currently the standard for symmetric encryption worldwide</li>
                </>
              )}
            </ul>
          </div>
        </CardContent>
      </Card>

      <div className="flex flex-col sm:flex-row gap-4 justify-center">
        <Button 
          onClick={onViewSteps}
          variant="outline" 
          className="flex items-center gap-2"
        >
          <Eye className="w-4 h-4" />
          Review Steps
        </Button>
        
        <Button 
          onClick={handleDownload}
          variant="outline" 
          className="flex items-center gap-2"
        >
          <Download className="w-4 h-4" />
          Download Report
        </Button>
        
        <Button 
          onClick={onReset}
          className="flex items-center gap-2 bg-blue-600 hover:bg-blue-700"
        >
          <RotateCcw className="w-4 h-4" />
          Try Another Algorithm
        </Button>
      </div>

      <div className="bg-blue-50 rounded-lg p-6 text-center">
        <h3 className="font-semibold text-blue-900 mb-2">ðŸŽ‰ Congratulations!</h3>
        <p className="text-blue-800 text-sm">
          You've successfully completed a {algorithm.toUpperCase()} algorithm walkthrough. 
          Try exploring other algorithms to deepen your understanding of cryptography!
        </p>
      </div>
    </div>
  );
};

export default ResultsDisplay;
